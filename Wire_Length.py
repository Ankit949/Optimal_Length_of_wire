# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oW66Sm1DNulaES888BIvraKbqbIli3pX
"""

import pandas as pd
import numpy as np

wire_data=pd.read_csv("res.kaggle.csv")
wire_data

from sklearn.preprocessing import MinMaxScaler

scaler=MinMaxScaler(feature_range=(0,100))
scaled_feature=scaler.fit_transform(wire_data)
scaled_feature

wire1=pd.DataFrame(scaled_feature)
wire1

from sklearn.preprocessing import StandardScaler
scaler1=StandardScaler()
scaled1_feature=scaler1.fit_transform(wire_data)
scaled1_feature

wire2=pd.DataFrame(scaled1_feature)
wire2

from sklearn.preprocessing import RobustScaler
robust=RobustScaler()
scaled2_feature=robust.fit_transform(wire_data)
scaled2_feature

wire3=pd.DataFrame(scaled2_feature)
wire3

from sklearn.preprocessing import Normalizer
normalizer=Normalizer(norm="l2")
Scaled3_feature=normalizer.transform(wire_data)
Scaled3_feature

wire=pd.DataFrame(Scaled3_feature)
wire

wire1.rename(columns={1: "Length", 2: "Width",3:"Temperature",4:"Resistance"},inplace=True)

del wire1[0]
wire1

wire1.describe()

import matplotlib.pyplot as plt
wire1.hist(bins=50,figsize=(10,5))

plt.scatter(wire1['Length'],wire1['Resistance'])
plt.xlabel("Length") 
plt.ylabel("Resistance") 
plt.show()

plt.scatter(wire1['Length'],wire1['Temperature'])
plt.xlabel("Length") 
plt.ylabel("Temperature") 
plt.show()

plt.scatter(wire1['Length'],wire1['Width'])
plt.xlabel("Length") 
plt.ylabel("Width") 
plt.show()

train_data=wire1.sample(frac=0.8)

test_data=wire1.drop(train_data.index)

print(train_data.shape)
print(test_data.shape)
train_label=train_data.pop('Length')

test_label=test_data.pop('Length')

mf=[[['gaussmf',{"mean":np.mean(np.arange(0,20)),
                "sigma":np.std(np.arange(0,20))}],
    ['gaussmf',{"mean":np.mean(np.arange(20,40)),
                "sigma":np.std(np.arange(20,40))}],
     ['gaussmf',{"mean":np.mean(np.arange(40,60)),
                "sigma":np.std(np.arange(40,60))}],
    ['gaussmf',{"mean":np.mean(np.arange(60,80)),
                "sigma":np.std(np.arange(60,80))}],
     ['gaussmf',{'mean':np.mean(np.arange(80,100)),
               'sigma':np.std(np.arange(80,100))}]],
   [['gaussmf',{"mean":np.mean(np.arange(0,20)),
                "sigma":np.std(np.arange(0,20))}],
    ['gaussmf',{"mean":np.mean(np.arange(20,40)),
                "sigma":np.std(np.arange(20,40))}],
    ['gaussmf',{"mean":np.mean(np.arange(40,60)),
                "sigma":np.std(np.arange(40,60))}],
    ['gaussmf',{"mean":np.mean(np.arange(60,80)),
                "sigma":np.std(np.arange(60,80))}],
    ['gaussmf',{"mean":np.mean(np.arange(80,100)),
                "sigma":np.std(np.arange(80,100))}]],
   [['gaussmf',{"mean":np.mean(np.arange(0,20)),
                "sigma":np.std(np.arange(0,20))}],
    ['gaussmf',{"mean":np.mean(np.arange(20,40)),
                "sigma":np.std(np.arange(20,40))}],
     ['gaussmf',{"mean":np.mean(np.arange(40,60)),
                "sigma":np.std(np.arange(40,60))}],
    ['gaussmf',{"mean":np.mean(np.arange(60,80)),
                "sigma":np.std(np.arange(60,80))}],
     ['gaussmf',{'mean':np.mean(np.arange(80,100)),
               'sigma':np.std(np.arange(80,100))}]]]

pip install -U scikit-fuzzy

import membershipfunction
mfc = membershipfunction.MemFuncs(mf)

import anfis
anf = anfis.ANFIS(train_data,train_label, mfc)

pred_train=anf.trainHybridJangOffLine(epochs=4)

train_label
print(len(train_label))

train_label=train_label.to_numpy()
test_label=test_label.to_numpy()

train_label=train_label.reshape(1,8000)
test_label=test_label.reshape(1,2000)

error=np.mean((pred_train-train_label)**2)
print(error)

anf.plotErrors()
anf.plotResults()

y_pred=anfis.predict(anf,test_data.values)

print(y_pred)

print(test_label.shape)
test_label

from sklearn.metrics import  mean_squared_error
error=mean_squared_error(test_label.reshape(2000,1),y_pred)
print(error)